package jgam.util;

import org.jmlspecs.lang.*;
import org.jmlspecs.jmlrac.runtime.*;


public class JMLTest extends java.lang.Object implements JMLCheckable {

  public static final int SECONDS_PER_DAY = 86400;
  private int secondsSinceMidnight = 0;

  public JMLTest() {
    super();
    rac$dented = true;
    // skip assertion checking during initialization
    if (!rac$ClassInitialized || !rac$initialzed) {
      internal$$init$();
      return;
    }
    if (!(JMLChecker.isActive(JMLChecker.PRECONDITION) && rac$dented())) {
      internal$$init$();
      return;
    }
    // check static invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT) && rac$dented()) {
      JMLChecker.enter();
      checkInv$static("<init>@pre<File \"JMLTest.java\", line 17, character 16>");
      JMLChecker.exit();
    }
    // check precondition
    if (JMLChecker.isActive(JMLChecker.PRECONDITION)) {
      JMLChecker.enter();
      checkPre$$init$$JMLTest();
      JMLChecker.exit();
    }
    // eval old exprs in constraint
    if (JMLChecker.isActive(JMLChecker.CONSTRAINT) && rac$dented()) {
      JMLChecker.enter();
      evalOldExprInHC$static();
      JMLChecker.exit();
    }
    boolean rac$ok = true;
    boolean rac$inv = true;
    try {
      internal$$init$();
      // check normal postcondition
      if (JMLChecker.isActive(JMLChecker.POSTCONDITION) && rac$dented()) {
        JMLChecker.enter();
        checkPost$$init$$JMLTest(null);
        JMLChecker.exit();
      }
    }
    catch (JMLEntryPreconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalPreconditionError(rac$e);
    }
    catch (JMLAssertionError rac$e) {
      rac$ok = false;
      throw rac$e;
    }
    catch (java.lang.Throwable rac$e) {
      rac$inv = false;
      try {
        // check exceptional postcondition
        if (JMLChecker.isActive(JMLChecker.POSTCONDITION) && rac$dented()) {
          JMLChecker.enter();
          checkXPost$$init$$JMLTest(rac$e);
          JMLChecker.exit();
        }
      }
      catch (JMLAssertionError rac$e1) {
        rac$ok = false;
        throw rac$e1;
      }
    }
    finally {
      if (rac$ok && rac$inv) {
        // check instance invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT) && rac$dented()) {
          JMLChecker.enter();
          checkInv$instance$JMLTest("<init>@post<File \"JMLTest.java\", line 17, character 16>");
          JMLChecker.exit();
        }
      }
      if (rac$ok) {
        // check static invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT) && rac$dented()) {
          JMLChecker.enter();
          checkInv$static("<init>@post<File \"JMLTest.java\", line 17, character 16>");
          JMLChecker.exit();
        }
        // check static constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT) && rac$dented()) {
          JMLChecker.enter();
          checkHC$static("<init>@post<File \"JMLTest.java\", line 17, character 16>", "<init>", new java.lang.Class[] { });
          JMLChecker.exit();
        }
      }
    }
  }


  private /*@ pure @*/ int internal$getSeconds() {
    return secondsSinceMidnight % 60;
  }


  private /*@ pure @*/ int internal$getMinutes() {
    return (secondsSinceMidnight / 60) % 60;
  }


  private /*@ pure @*/ int internal$getHours() {
    return secondsSinceMidnight / 3600;
  }


  private void internal$setSeconds(int seconds) {
    secondsSinceMidnight = secondsSinceMidnight - (secondsSinceMidnight % 60) + seconds;
  }

  /** Generated by JML to check static invariants of 
   * class JMLTest. */
  public static void checkInv$static(java.lang.String rac$msg) {
  }

  /** Generated by JML to check non-static invariants of 
   * class JMLTest. */
  public void checkInv$instance$JMLTest(java.lang.String rac$msg) {
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = true;
    try {
      // eval of &&
      boolean rac$v0 = true;
      boolean rac$v1 = false, rac$v2 = false;
      // arg 1 of &&
      try {
        boolean rac$v3 = false, rac$v4 = false;
        int rac$v5 = 0;
        int rac$v6 = 0;
        try {
          rac$v5 = this.secondsSinceMidnight;
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v4 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v3 = true;
        }
        if (!rac$v3) {
          try {
            rac$v6 = 0;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v4 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v3 = true;
          }
        }
        if (rac$v3) { rac$v0 = false; }
        else if (rac$v4) { rac$v0 = true; }
        else try {
         rac$v0 = rac$v5>=rac$v6;
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v0 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v0 = false;
        }
        if (!rac$v0) {
          int rac$v8 = JMLChecker.getLevel();
          JMLChecker.setLevel(JMLChecker.NONE);
          java.lang.String rac$v7 = "";
          rac$v7 += "\n\t'secondsSinceMidnight' is " + JMLChecker.toString(secondsSinceMidnight);
          rac$v7 += "\n\t'this' is " + JMLChecker.toString(this);
          JMLChecker.setLevel(rac$v8);
          rac$where.add("File \"JMLTest.java\", line 26, character 51 when" + rac$v7);
        }
      }
      catch (JMLNonExecutableException jml$e0) {
        rac$v2 = true;
      }
      catch (java.lang.Exception jml$e0) {
        rac$v1 = true;
      }
      if (rac$v0) {
        // arg 2 of &&
        try {
          boolean rac$v9 = false, rac$v10 = false;
          int rac$v11 = 0;
          int rac$v12 = 0;
          try {
            rac$v11 = this.secondsSinceMidnight;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v10 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v9 = true;
          }
          if (!rac$v9) {
            try {
              rac$v12 = 86400;
            }
            catch (JMLNonExecutableException jml$e0) {
              rac$v10 = true;
            }
            catch (java.lang.Exception jml$e0) {
              rac$v9 = true;
            }
          }
          if (rac$v9) { rac$v0 = false; }
          else if (rac$v10) { rac$v0 = true; }
          else try {
           rac$v0 = rac$v11<rac$v12;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v0 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v0 = false;
          }
          if (!rac$v0) {
            int rac$v14 = JMLChecker.getLevel();
            JMLChecker.setLevel(JMLChecker.NONE);
            java.lang.String rac$v13 = "";
            rac$v13 += "\n\t'secondsSinceMidnight' is " + JMLChecker.toString(secondsSinceMidnight);
            rac$v13 += "\n\t'this' is " + JMLChecker.toString(this);
            JMLChecker.setLevel(rac$v14);
            rac$where.add("File \"JMLTest.java\", line 27, character 49 when" + rac$v13);
          }
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v2 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v1 = true;
        }
      }
      if (rac$v0) {
        if (rac$v1) { throw JMLChecker.DEMONIC_EXCEPTION; }
        if (rac$v2) { throw JMLChecker.ANGELIC_EXCEPTION; }
      }
      rac$b = rac$v0;
    }
    catch (JMLNonExecutableException jml$e0) {
      rac$b = true;
    }
    catch (java.lang.Exception jml$e0) {
      rac$b = false;
    }
    boolean rac$bSuper = true;
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLInvariantError("JMLTest", rac$msg, rac$where);
    }
  }

  /** Generated by JML to check static constraints of 
   * class JMLTest. */
  public static void checkHC$static(java.lang.String rac$msg,
    java.lang.String rac$name, java.lang.Class[] rac$params) {
  }

  /** Generated by JML to check non-static constraints of 
   * class JMLTest. */
  public void checkHC$instance$JMLTest(java.lang.String rac$msg,
    boolean rac$private, java.lang.String rac$name, java.lang.Class[] rac$params) {
    rac$name = rac$private ? null : rac$name;
  }

  /** Generated by JML to check non-static constraints of 
   * class JMLTest. */
  public void checkHC$instanceW$JMLTest(java.lang.String rac$msg,
    java.lang.String rac$name, java.lang.Class[] rac$params) {
  }

  /** Generated by JML to check non-static constraints of 
   * class JMLTest. */
  public void checkHC$instanceS$JMLTest(java.lang.String rac$msg,
    java.lang.String rac$name, java.lang.Class[] rac$params) {
  }

  /** Generated by JML to evaluate, in the pre-state,
   * the old expressions appearing in the static constraints
   * of class JMLTest. */
  public static void evalOldExprInHC$static() {
  }

  /** Generated by JML to evaluate, in the pre-state,
   * the old expressions appearing in the non-static constraints
   * of class JMLTest. */
  public void evalOldExprInHC$instance$JMLTest() {
  }

  /** Generated by JML to check the precondition of
   * method JMLTest. */
  public boolean checkPre$$init$$JMLTest() {
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = false;
    try {
      rac$pre0 = true;
      if (!rac$pre0) {
        rac$where.add("File \"JMLTest.java\", line 17, character 16");
      }
    }
    catch (JMLNonExecutableException jml$e0) {
      rac$pre0 = true;
    }
    catch (java.lang.Exception jml$e0) {
      rac$pre0 = false;
    }
    rac$b = rac$b || rac$pre0;
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLEntryPreconditionError("JMLTest", "JMLTest", rac$where);
    }
    return true;
  }

  /** Generated by JML to check the normal postcondition of
   * method JMLTest. */
  public void checkPost$$init$$JMLTest(java.lang.Object rac$result) {
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = true;
    boolean rac$b0 = true;
    if (rac$pre0) {
      try {
        // eval of &&
        boolean rac$v0 = true;
        boolean rac$v1 = false, rac$v2 = false;
        // arg 1 of &&
        try {
          // eval of &&
          boolean rac$v3 = true;
          boolean rac$v4 = false, rac$v5 = false;
          // arg 1 of &&
          try {
            boolean rac$v6 = false, rac$v7 = false;
            int rac$v8 = 0;
            try {
              // getSeconds(...)
              rac$v8 = this.getSeconds();
            }
            catch (JMLNonExecutableException jml$e0) {
              rac$v7 = true;
            }
            catch (java.lang.Exception jml$e0) {
              rac$v6 = true;
            }
            int rac$v9 = 0;
            if (!rac$v6) {
              try {
                rac$v9 = 0;
              }
              catch (JMLNonExecutableException jml$e0) {
                rac$v7 = true;
              }
              catch (java.lang.Exception jml$e0) {
                rac$v6 = true;
              }
            }
            if (rac$v6) { rac$v3 = false; }
            else if (rac$v7) { rac$v3 = true; }
            else {
             rac$v3 = rac$v8==rac$v9;
            }
            if (!rac$v3) {
              int rac$v11 = JMLChecker.getLevel();
              JMLChecker.setLevel(JMLChecker.NONE);
              java.lang.String rac$v10 = "";
              rac$v10 += "\n\t'this' is " + JMLChecker.toString(this);
              JMLChecker.setLevel(rac$v11);
              rac$where.add("File \"JMLTest.java\", line 17, character 29 when" + rac$v10);
            }
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v5 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v4 = true;
          }
          if (rac$v3) {
            // arg 2 of &&
            try {
              boolean rac$v12 = false, rac$v13 = false;
              int rac$v14 = 0;
              try {
                // getMinutes(...)
                rac$v14 = this.getMinutes();
              }
              catch (JMLNonExecutableException jml$e0) {
                rac$v13 = true;
              }
              catch (java.lang.Exception jml$e0) {
                rac$v12 = true;
              }
              int rac$v15 = 0;
              if (!rac$v12) {
                try {
                  rac$v15 = 0;
                }
                catch (JMLNonExecutableException jml$e0) {
                  rac$v13 = true;
                }
                catch (java.lang.Exception jml$e0) {
                  rac$v12 = true;
                }
              }
              if (rac$v12) { rac$v3 = false; }
              else if (rac$v13) { rac$v3 = true; }
              else {
               rac$v3 = rac$v14==rac$v15;
              }
              if (!rac$v3) {
                int rac$v17 = JMLChecker.getLevel();
                JMLChecker.setLevel(JMLChecker.NONE);
                java.lang.String rac$v16 = "";
                rac$v16 += "\n\t'this' is " + JMLChecker.toString(this);
                JMLChecker.setLevel(rac$v17);
                rac$where.add("File \"JMLTest.java\", line 18, character 29 when" + rac$v16);
              }
            }
            catch (JMLNonExecutableException jml$e0) {
              rac$v5 = true;
            }
            catch (java.lang.Exception jml$e0) {
              rac$v4 = true;
            }
          }
          if (rac$v3) {
            if (rac$v4) { throw JMLChecker.DEMONIC_EXCEPTION; }
            if (rac$v5) { throw JMLChecker.ANGELIC_EXCEPTION; }
          }
          rac$v0 = rac$v3;
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v2 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v1 = true;
        }
        if (rac$v0) {
          // arg 2 of &&
          try {
            boolean rac$v18 = false, rac$v19 = false;
            int rac$v20 = 0;
            try {
              // getHours(...)
              rac$v20 = this.getHours();
            }
            catch (JMLNonExecutableException jml$e0) {
              rac$v19 = true;
            }
            catch (java.lang.Exception jml$e0) {
              rac$v18 = true;
            }
            int rac$v21 = 0;
            if (!rac$v18) {
              try {
                rac$v21 = 0;
              }
              catch (JMLNonExecutableException jml$e0) {
                rac$v19 = true;
              }
              catch (java.lang.Exception jml$e0) {
                rac$v18 = true;
              }
            }
            if (rac$v18) { rac$v0 = false; }
            else if (rac$v19) { rac$v0 = true; }
            else {
             rac$v0 = rac$v20==rac$v21;
            }
            if (!rac$v0) {
              int rac$v23 = JMLChecker.getLevel();
              JMLChecker.setLevel(JMLChecker.NONE);
              java.lang.String rac$v22 = "";
              rac$v22 += "\n\t'this' is " + JMLChecker.toString(this);
              JMLChecker.setLevel(rac$v23);
              rac$where.add("File \"JMLTest.java\", line 19, character 27 when" + rac$v22);
            }
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v2 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v1 = true;
          }
        }
        if (rac$v0) {
          if (rac$v1) { throw JMLChecker.DEMONIC_EXCEPTION; }
          if (rac$v2) { throw JMLChecker.ANGELIC_EXCEPTION; }
        }
        rac$b0 = rac$v0;
      }
      catch (JMLNonExecutableException jml$e0) {
        rac$b0 = true;
      }
      catch (java.lang.Exception jml$e0) {
        rac$b0 = false;
      }
    }
    rac$b = rac$b && rac$b0;
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLExitNormalPostconditionError("JMLTest", "JMLTest", rac$where);
    }
  }

  /** Generated by JML to check the exceptional postcondition of
   * method JMLTest. */
  public void checkXPost$$init$$JMLTest(java.lang.Throwable rac$e) {
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = true;
    if (rac$e instanceof java.lang.Exception) {
      java.lang.Exception jml$e = (java.lang.Exception) rac$e;
      boolean rac$b1 = true;
      if (rac$pre0) {
        rac$b1 = false;
      }
      if (!rac$b1) {
         rac$where.add("\tFile \"JMLTest.java\", line 17, character 16, when" + "\n\t\t'jml$e' is " + rac$e);
      }
      rac$b = rac$b && rac$b1;
    }
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLExitExceptionalPostconditionError("JMLTest", "JMLTest", rac$where);
    }
    JMLChecker.exit();
    if (rac$e instanceof java.lang.RuntimeException) {
        throw (java.lang.RuntimeException) rac$e;
    }
    if (rac$e instanceof java.lang.Error) {
        throw (java.lang.Error) rac$e;
    }
  }

  /** Generated by JML to wrap assertion check code to
   * the constructor of the same signature. */
  private void internal$$init$() {
  }

  // Generated by JML
  private transient boolean rac$pre0;

  /** Generated by JML to check the precondition of
   * method getSeconds. */
  public boolean checkPre$getSeconds$JMLTest() {
    return false;
  }

  /** Generated by JML to check the normal postcondition of
   * method getSeconds. */
  public void checkPost$getSeconds$JMLTest(int rac$result) {
  }

  /** Generated by JML to check the exceptional postcondition of
   * method getSeconds. */
  public void checkXPost$getSeconds$JMLTest(java.lang.Throwable rac$e) {
    JMLChecker.exit();
    if (rac$e instanceof java.lang.RuntimeException) {
        throw (java.lang.RuntimeException) rac$e;
    }
    if (rac$e instanceof java.lang.Error) {
        throw (java.lang.Error) rac$e;
    }
  }

  /** Generated by JML to wrap assertion check code to
   * the method getSeconds. */
  public /*@ pure @*/ int getSeconds() {
    // skip assertion checks during initialization
    if (!rac$ClassInitialized || !rac$initialzed || !rac$dented()) {
      return internal$getSeconds();
    }
    int rac$result = 0;
    if (!(JMLChecker.isActive(JMLChecker.PRECONDITION))) {
      rac$result = internal$getSeconds();
      return rac$result;
    }
    // eval old exprs in constraint
    if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
      JMLChecker.enter();
      evalOldExprInHC$instance$JMLTest();
      JMLChecker.exit();
    }
    // check static invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$static("getSeconds@pre<File \"JMLTest.java\", line 31, character 13>");
      JMLChecker.exit();
    }
    // check instance invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$instance$JMLTest("getSeconds@pre<File \"JMLTest.java\", line 31, character 13>");
      JMLChecker.exit();
    }
    // check precondition
    if (JMLChecker.isActive(JMLChecker.PRECONDITION)) {
      JMLChecker.enter();
      checkPre$getSeconds$JMLTest();
      JMLChecker.exit();
    }
    boolean rac$ok = true;
    try {
      // execute original method
      rac$result = internal$getSeconds();
      // check normal postcondition
      if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
        JMLChecker.enter();
        checkPost$getSeconds$JMLTest(rac$result);
        JMLChecker.exit();
      }
    }
    catch (JMLEntryPreconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalPreconditionError(rac$e);
    }
    catch (JMLExitNormalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalNormalPostconditionError(rac$e);
    }
    catch (JMLExitExceptionalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalExceptionalPostconditionError(rac$e);
    }
    catch (JMLAssertionError rac$e) {
      rac$ok = false;
      throw rac$e;
    }
    catch ( java.lang.Throwable rac$e) {
      try {
        // check exceptional postcondition
        if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
          JMLChecker.enter();
          checkXPost$getSeconds$JMLTest(rac$e);
          JMLChecker.exit();
        }
      }
      catch (JMLAssertionError rac$e1) {
        rac$ok = false;
        throw rac$e1;
      }
    }
    finally {
      if (rac$ok) {
        // check static invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$static("getSeconds@post<File \"JMLTest.java\", line 31, character 13>");
          JMLChecker.exit();
        }
        // check instance invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$instance$JMLTest("getSeconds@post<File \"JMLTest.java\", line 31, character 13>");
          JMLChecker.exit();
        }
        // check static constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$static("getSeconds@post<File \"JMLTest.java\", line 31, character 13>", "getSeconds", new java.lang.Class[] { });
          JMLChecker.exit();
        }
        // check instance constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$instance$JMLTest("getSeconds@post<File \"JMLTest.java\", line 31, character 13>", false, "getSeconds", new java.lang.Class[] { });
          JMLChecker.exit();
        }
      }
    }
    return rac$result;
  }

  /** Generated by JML to check the precondition of
   * method getMinutes. */
  public boolean checkPre$getMinutes$JMLTest() {
    return false;
  }

  /** Generated by JML to check the normal postcondition of
   * method getMinutes. */
  public void checkPost$getMinutes$JMLTest(int rac$result) {
  }

  /** Generated by JML to check the exceptional postcondition of
   * method getMinutes. */
  public void checkXPost$getMinutes$JMLTest(java.lang.Throwable rac$e) {
    JMLChecker.exit();
    if (rac$e instanceof java.lang.RuntimeException) {
        throw (java.lang.RuntimeException) rac$e;
    }
    if (rac$e instanceof java.lang.Error) {
        throw (java.lang.Error) rac$e;
    }
  }

  /** Generated by JML to wrap assertion check code to
   * the method getMinutes. */
  public /*@ pure @*/ int getMinutes() {
    // skip assertion checks during initialization
    if (!rac$ClassInitialized || !rac$initialzed || !rac$dented()) {
      return internal$getMinutes();
    }
    int rac$result = 0;
    if (!(JMLChecker.isActive(JMLChecker.PRECONDITION))) {
      rac$result = internal$getMinutes();
      return rac$result;
    }
    // eval old exprs in constraint
    if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
      JMLChecker.enter();
      evalOldExprInHC$instance$JMLTest();
      JMLChecker.exit();
    }
    // check static invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$static("getMinutes@pre<File \"JMLTest.java\", line 36, character 13>");
      JMLChecker.exit();
    }
    // check instance invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$instance$JMLTest("getMinutes@pre<File \"JMLTest.java\", line 36, character 13>");
      JMLChecker.exit();
    }
    // check precondition
    if (JMLChecker.isActive(JMLChecker.PRECONDITION)) {
      JMLChecker.enter();
      checkPre$getMinutes$JMLTest();
      JMLChecker.exit();
    }
    boolean rac$ok = true;
    try {
      // execute original method
      rac$result = internal$getMinutes();
      // check normal postcondition
      if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
        JMLChecker.enter();
        checkPost$getMinutes$JMLTest(rac$result);
        JMLChecker.exit();
      }
    }
    catch (JMLEntryPreconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalPreconditionError(rac$e);
    }
    catch (JMLExitNormalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalNormalPostconditionError(rac$e);
    }
    catch (JMLExitExceptionalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalExceptionalPostconditionError(rac$e);
    }
    catch (JMLAssertionError rac$e) {
      rac$ok = false;
      throw rac$e;
    }
    catch ( java.lang.Throwable rac$e) {
      try {
        // check exceptional postcondition
        if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
          JMLChecker.enter();
          checkXPost$getMinutes$JMLTest(rac$e);
          JMLChecker.exit();
        }
      }
      catch (JMLAssertionError rac$e1) {
        rac$ok = false;
        throw rac$e1;
      }
    }
    finally {
      if (rac$ok) {
        // check static invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$static("getMinutes@post<File \"JMLTest.java\", line 36, character 13>");
          JMLChecker.exit();
        }
        // check instance invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$instance$JMLTest("getMinutes@post<File \"JMLTest.java\", line 36, character 13>");
          JMLChecker.exit();
        }
        // check static constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$static("getMinutes@post<File \"JMLTest.java\", line 36, character 13>", "getMinutes", new java.lang.Class[] { });
          JMLChecker.exit();
        }
        // check instance constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$instance$JMLTest("getMinutes@post<File \"JMLTest.java\", line 36, character 13>", false, "getMinutes", new java.lang.Class[] { });
          JMLChecker.exit();
        }
      }
    }
    return rac$result;
  }

  /** Generated by JML to check the precondition of
   * method getHours. */
  public boolean checkPre$getHours$JMLTest() {
    return false;
  }

  /** Generated by JML to check the normal postcondition of
   * method getHours. */
  public void checkPost$getHours$JMLTest(int rac$result) {
  }

  /** Generated by JML to check the exceptional postcondition of
   * method getHours. */
  public void checkXPost$getHours$JMLTest(java.lang.Throwable rac$e) {
    JMLChecker.exit();
    if (rac$e instanceof java.lang.RuntimeException) {
        throw (java.lang.RuntimeException) rac$e;
    }
    if (rac$e instanceof java.lang.Error) {
        throw (java.lang.Error) rac$e;
    }
  }

  /** Generated by JML to wrap assertion check code to
   * the method getHours. */
  public /*@ pure @*/ int getHours() {
    // skip assertion checks during initialization
    if (!rac$ClassInitialized || !rac$initialzed || !rac$dented()) {
      return internal$getHours();
    }
    int rac$result = 0;
    if (!(JMLChecker.isActive(JMLChecker.PRECONDITION))) {
      rac$result = internal$getHours();
      return rac$result;
    }
    // eval old exprs in constraint
    if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
      JMLChecker.enter();
      evalOldExprInHC$instance$JMLTest();
      JMLChecker.exit();
    }
    // check static invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$static("getHours@pre<File \"JMLTest.java\", line 41, character 13>");
      JMLChecker.exit();
    }
    // check instance invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$instance$JMLTest("getHours@pre<File \"JMLTest.java\", line 41, character 13>");
      JMLChecker.exit();
    }
    // check precondition
    if (JMLChecker.isActive(JMLChecker.PRECONDITION)) {
      JMLChecker.enter();
      checkPre$getHours$JMLTest();
      JMLChecker.exit();
    }
    boolean rac$ok = true;
    try {
      // execute original method
      rac$result = internal$getHours();
      // check normal postcondition
      if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
        JMLChecker.enter();
        checkPost$getHours$JMLTest(rac$result);
        JMLChecker.exit();
      }
    }
    catch (JMLEntryPreconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalPreconditionError(rac$e);
    }
    catch (JMLExitNormalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalNormalPostconditionError(rac$e);
    }
    catch (JMLExitExceptionalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalExceptionalPostconditionError(rac$e);
    }
    catch (JMLAssertionError rac$e) {
      rac$ok = false;
      throw rac$e;
    }
    catch ( java.lang.Throwable rac$e) {
      try {
        // check exceptional postcondition
        if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
          JMLChecker.enter();
          checkXPost$getHours$JMLTest(rac$e);
          JMLChecker.exit();
        }
      }
      catch (JMLAssertionError rac$e1) {
        rac$ok = false;
        throw rac$e1;
      }
    }
    finally {
      if (rac$ok) {
        // check static invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$static("getHours@post<File \"JMLTest.java\", line 41, character 13>");
          JMLChecker.exit();
        }
        // check instance invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$instance$JMLTest("getHours@post<File \"JMLTest.java\", line 41, character 13>");
          JMLChecker.exit();
        }
        // check static constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$static("getHours@post<File \"JMLTest.java\", line 41, character 13>", "getHours", new java.lang.Class[] { });
          JMLChecker.exit();
        }
        // check instance constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$instance$JMLTest("getHours@post<File \"JMLTest.java\", line 41, character 13>", false, "getHours", new java.lang.Class[] { });
          JMLChecker.exit();
        }
      }
    }
    return rac$result;
  }

  /** Generated by JML to check the precondition of
   * method setSeconds. */
  public boolean checkPre$setSeconds$JMLTest(int seconds) {
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = false;
    try {
      // eval of &&
      boolean rac$v0 = true;
      boolean rac$v1 = false, rac$v2 = false;
      // arg 1 of &&
      try {
        boolean rac$v3 = false, rac$v4 = false;
        int rac$v5 = 0;
        int rac$v6 = 0;
        try {
          rac$v5 = seconds;
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v4 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v3 = true;
        }
        if (!rac$v3) {
          try {
            rac$v6 = 0;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v4 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v3 = true;
          }
        }
        if (rac$v3) { rac$v0 = false; }
        else if (rac$v4) { rac$v0 = true; }
        else try {
         rac$v0 = rac$v5>=rac$v6;
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v0 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v0 = false;
        }
      }
      catch (JMLNonExecutableException jml$e0) {
        rac$v2 = true;
      }
      catch (java.lang.Exception jml$e0) {
        rac$v1 = true;
      }
      if (rac$v0) {
        // arg 2 of &&
        try {
          boolean rac$v7 = false, rac$v8 = false;
          int rac$v9 = 0;
          int rac$v10 = 0;
          try {
            rac$v9 = seconds;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v8 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v7 = true;
          }
          if (!rac$v7) {
            try {
              rac$v10 = 60;
            }
            catch (JMLNonExecutableException jml$e0) {
              rac$v8 = true;
            }
            catch (java.lang.Exception jml$e0) {
              rac$v7 = true;
            }
          }
          if (rac$v7) { rac$v0 = false; }
          else if (rac$v8) { rac$v0 = true; }
          else try {
           rac$v0 = rac$v9<rac$v10;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v0 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v0 = false;
          }
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v2 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v1 = true;
        }
      }
      if (rac$v0) {
        if (rac$v1) { throw JMLChecker.DEMONIC_EXCEPTION; }
        if (rac$v2) { throw JMLChecker.ANGELIC_EXCEPTION; }
      }
      rac$pre1 = rac$v0;
      JMLChecker.addCoverage("File \"JMLTest.java\", line 46, character 28",rac$pre1);
      if (!rac$pre1) {
        int rac$v12 = JMLChecker.getLevel();
        JMLChecker.setLevel(JMLChecker.NONE);
        java.lang.String rac$v11 = "";
        rac$v11 += "\n\t'seconds' is " + JMLChecker.toString(seconds);
        JMLChecker.setLevel(rac$v12);
        rac$where.add("File \"JMLTest.java\", line 46, character 28 when" + rac$v11);
      }
    }
    catch (JMLNonExecutableException jml$e0) {
      rac$pre1 = true;
    }
    catch (java.lang.Exception jml$e0) {
      rac$pre1 = false;
    }
    rac$b = rac$b || rac$pre1;
    if (!rac$b) {
      if (JMLChecker.getLevel() > JMLChecker.PRECONDITION) {
        saveTo$rac$stack0();
      }
      JMLChecker.exit();
      throw new JMLEntryPreconditionError("JMLTest", "setSeconds", rac$where);
    }
    if (JMLChecker.getLevel() > JMLChecker.PRECONDITION) {
      saveTo$rac$stack0();
    }
    return true;
  }

  /** Generated by JML to check the normal postcondition of
   * method setSeconds. */
  public void checkPost$setSeconds$JMLTest(int seconds, java.lang.Object rac$result) {
    restoreFrom$rac$stack0();
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = true;
    boolean rac$b0 = true;
    if (rac$pre1) {
      try {
        boolean rac$v0 = false, rac$v1 = false;
        int rac$v2 = 0;
        try {
          // getSeconds(...)
          rac$v2 = this.getSeconds();
        }
        catch (JMLNonExecutableException jml$e0) {
          rac$v1 = true;
        }
        catch (java.lang.Exception jml$e0) {
          rac$v0 = true;
        }
        int rac$v3 = 0;
        if (!rac$v0) {
          try {
            rac$v3 = seconds;
          }
          catch (JMLNonExecutableException jml$e0) {
            rac$v1 = true;
          }
          catch (java.lang.Exception jml$e0) {
            rac$v0 = true;
          }
        }
        if (rac$v0) { rac$b0 = false; }
        else if (rac$v1) { rac$b0 = true; }
        else {
         rac$b0 = rac$v2==rac$v3;
        }
        if (!rac$b0) {
          int rac$v5 = JMLChecker.getLevel();
          JMLChecker.setLevel(JMLChecker.NONE);
          java.lang.String rac$v4 = "";
          rac$v4 += "\n\t'seconds' is " + JMLChecker.toString(seconds);
          rac$v4 += "\n\t'this' is " + JMLChecker.toString(this);
          JMLChecker.setLevel(rac$v5);
          rac$where.add("File \"JMLTest.java\", line 47, character 29 when" + rac$v4);
        }
      }
      catch (JMLNonExecutableException jml$e0) {
        rac$b0 = true;
      }
      catch (java.lang.Exception jml$e0) {
        rac$b0 = false;
      }
    }
    rac$b = rac$b && rac$b0;
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLExitNormalPostconditionError("JMLTest", "setSeconds", rac$where);
    }
  }

  /** Generated by JML to check the exceptional postcondition of
   * method setSeconds. */
  public void checkXPost$setSeconds$JMLTest(int seconds, java.lang.Throwable rac$e) {
    restoreFrom$rac$stack0();
    java.util.Set rac$where = new java.util.HashSet();
    boolean rac$b = true;
    if (rac$e instanceof java.lang.Exception) {
      java.lang.Exception jml$e = (java.lang.Exception) rac$e;
      boolean rac$b1 = true;
      if (rac$pre1) {
        rac$b1 = false;
      }
      if (!rac$b1) {
         rac$where.add("\tFile \"JMLTest.java\", line 47, character 16, when" + "\n\t\t'jml$e' is " + rac$e);
      }
      rac$b = rac$b && rac$b1;
    }
    if (!rac$b) {
      JMLChecker.exit();
      throw new JMLExitExceptionalPostconditionError("JMLTest", "setSeconds", rac$where);
    }
    JMLChecker.exit();
    if (rac$e instanceof java.lang.RuntimeException) {
        throw (java.lang.RuntimeException) rac$e;
    }
    if (rac$e instanceof java.lang.Error) {
        throw (java.lang.Error) rac$e;
    }
  }

  /** Generated by JML to save pre-values against potential recursive
    * method calls to the method setSeconds. */
  private transient java.util.Stack rac$stack0 = new java.util.Stack();

  /** Generated by JML to save pre-values for the method setSeconds. */
  private void saveTo$rac$stack0() {
    java.lang.Object[] values = new java.lang.Object[1];
    values[0] = new java.lang.Boolean(rac$pre1);
    rac$stack0.push(values);
  }

  /** Generated by JML to restore pre-values for the method setSeconds. */
  private void restoreFrom$rac$stack0() {
    java.lang.Object[] values = (java.lang.Object[])rac$stack0.pop();
    rac$pre1 = ((java.lang.Boolean) values[0]).booleanValue();
  }

  /** Generated by JML to wrap assertion check code to
   * the method setSeconds. */
  public void setSeconds(int seconds) {
    // skip assertion checks during initialization
    if (!rac$ClassInitialized || !rac$initialzed || !rac$dented()) {
      internal$setSeconds(seconds);
      return;
    }
    if (!(JMLChecker.isActive(JMLChecker.PRECONDITION))) {
      internal$setSeconds(seconds);
      return;
    }
    // eval old exprs in constraint
    if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
      JMLChecker.enter();
      evalOldExprInHC$instance$JMLTest();
      JMLChecker.exit();
    }
    // check static invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$static("setSeconds@pre<File \"JMLTest.java\", line 46, character 17>");
      JMLChecker.exit();
    }
    // check instance invariant
    if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
      JMLChecker.enter();
      checkInv$instance$JMLTest("setSeconds@pre<File \"JMLTest.java\", line 46, character 17>");
      JMLChecker.exit();
    }
    // check precondition
    if (JMLChecker.isActive(JMLChecker.PRECONDITION)) {
      JMLChecker.enter();
      checkPre$setSeconds$JMLTest(seconds);
      JMLChecker.exit();
    }
    boolean rac$ok = true;
    try {
      // execute original method
      internal$setSeconds(seconds);
      // check normal postcondition
      if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
        JMLChecker.enter();
        checkPost$setSeconds$JMLTest(seconds,null);
        JMLChecker.exit();
      }
    }
    catch (JMLEntryPreconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalPreconditionError(rac$e);
    }
    catch (JMLExitNormalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalNormalPostconditionError(rac$e);
    }
    catch (JMLExitExceptionalPostconditionError rac$e) {
      rac$ok = false;
      throw new JMLInternalExceptionalPostconditionError(rac$e);
    }
    catch (JMLAssertionError rac$e) {
      rac$ok = false;
      throw rac$e;
    }
    catch ( java.lang.Throwable rac$e) {
      try {
        // check exceptional postcondition
        if (JMLChecker.isActive(JMLChecker.POSTCONDITION)) {
          JMLChecker.enter();
          checkXPost$setSeconds$JMLTest(seconds,rac$e);
          JMLChecker.exit();
        }
      }
      catch (JMLAssertionError rac$e1) {
        rac$ok = false;
        throw rac$e1;
      }
    }
    finally {
      if (rac$ok) {
        // check static invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$static("setSeconds@post<File \"JMLTest.java\", line 46, character 17>");
          JMLChecker.exit();
        }
        // check instance invariant
        if (JMLChecker.isActive(JMLChecker.INVARIANT)) {
          JMLChecker.enter();
          checkInv$instance$JMLTest("setSeconds@post<File \"JMLTest.java\", line 46, character 17>");
          JMLChecker.exit();
        }
        // check static constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$static("setSeconds@post<File \"JMLTest.java\", line 46, character 17>", "setSeconds", new java.lang.Class[] { java.lang.Integer.TYPE, });
          JMLChecker.exit();
        }
        // check instance constraint
        if (JMLChecker.isActive(JMLChecker.CONSTRAINT)) {
          JMLChecker.enter();
          checkHC$instance$JMLTest("setSeconds@post<File \"JMLTest.java\", line 46, character 17>", false, "setSeconds", new java.lang.Class[] { java.lang.Integer.TYPE, });
          JMLChecker.exit();
        }
      }
    }
  }

  // Generated by JML
  private transient boolean rac$pre1;

  /** Generated by JML to make dynamic calls to an assertion
   * check methoda, given its class name (className),
   * method name (name), parameter types (types),
   * and actual arguments (args).
   * If the assertion method returns a boolean value,
   * that value is returned; otherwise, true is returned.
   * An exception thrown by the assertion method is transparently
   * propagated to the caller. */
  private static boolean rac$check(java.lang.String cn, JMLCheckable self,
    java.lang.String name, java.lang.Class types[], java.lang.Object args[]) {
    try {
      java.lang.Class cls = rac$forName(cn);
      java.lang.Object inst = rac$receiver(cn, self);
      java.lang.reflect.Method meth =
        JMLSurrogate.getMethod(cls, name, types);
      java.lang.Object result = meth.invoke(inst, args);
      return (result instanceof java.lang.Boolean) ?
       ((java.lang.Boolean) result).booleanValue() : true;
    }
    catch (java.lang.reflect.InvocationTargetException e) {
      // ok. The invoked method throws an exception, possibly an
      // assertion violation exception. Rethrow it transparently.
      Throwable thr = e.getTargetException();
      if (thr instanceof java.lang.RuntimeException)
         throw (java.lang.RuntimeException) thr;
      else if (thr instanceof java.lang.Error)
         throw (java.lang.Error) thr;
      else
         throw new java.lang.RuntimeException(e.getMessage());
    }
    catch (java.lang.Throwable e) {
       //System.out.println(e.getClass().getName());
       return false;
    }
  }

  /** Generated by JML for caching interface surrogates.
   * It is a mapp from fully qualified interface names
   * to their surrogate objects. */
  public transient java.util.Map rac$surrogates;

  /** Generated by JML to returns the surrogate of
   * the given interface, <code>name</code>. */
  public java.lang.Object rac$getSurrogate(java.lang.String name) {
    if (rac$surrogates == null) {
      rac$surrogates = new java.util.HashMap(37);
    }
    return rac$surrogates.get(name);
  }

  /** Generated by JML to set the surrogate of
   * the given interface, name, to the object obj. */
  public void rac$setSurrogate(java.lang.String name, JMLSurrogate obj) {
    if (rac$surrogates == null) {
      rac$surrogates = new java.util.HashMap(37);
    }
    rac$surrogates.put(name, obj);
  }

  /** Generated by JML to return the actual receiver (possibly
   * a surrogate) for dynamic calls to the class, name. */
  public static java.lang.Object rac$receiver(java.lang.String name, java.lang.Object forObj) {
    if (forObj == null || !name.endsWith("$JmlSurrogate")) {
      return forObj;
    }
    //@ assume forObj instanceof JMLCheckable;
    JMLCheckable cobj = (JMLCheckable) forObj;
    try {
      java.lang.Object surObj = cobj.rac$getSurrogate(name);
      if (surObj == null) {
        java.lang.Class[] types =
          new java.lang.Class[] { JMLCheckable.class };
        java.lang.Class clazz = rac$forName(name);
        java.lang.reflect.Constructor constr =
          clazz.getConstructor(types);
        java.lang.Object[] args = new java.lang.Object[] { cobj };
        surObj = constr.newInstance(args);
        cobj.rac$setSurrogate(name,(JMLSurrogate)surObj);
      }
      return surObj;
    }
    catch (Exception e) {
      java.lang.System.err.println("Internal error in getSurrogate()!");
      //e.printStackTrace();
      System.exit(1);
    }
    return null;
  }

  /** Generated by JML to indicate if an instance completes
     * its construction. */
  private transient boolean rac$dented = false;

  /** Generated by JML to query an instance's construction
    * status. */
  protected boolean rac$dented() {
    return rac$dented;
  }

  /** Generated by JML to return the Class object associated
   * with the class or interface with the given string name. */
  private static java.lang.Class rac$forName(java.lang.String className) {
    java.lang.Object clazz = JMLChecker.classes.get(className);
    if (clazz == JMLChecker.NO_CLASS) {
      throw new java.lang.RuntimeException(className);
    } else if (clazz != null) {
      return (java.lang.Class) clazz;
    }
    try {
      clazz = java.lang.Class.forName(className);
      JMLChecker.classes.put(className, clazz);
      return (java.lang.Class) clazz;
    } catch (java.lang.ClassNotFoundException e) {
      JMLChecker.classes.put(className, JMLChecker.NO_CLASS);
      throw new java.lang.RuntimeException(className);
    }
  }

  /** Generated by JML to indicate the runtime assertion check
   * level of this class; -1 if unspecified. */
  public static transient int rac$level = -1;

  /** Generated by JML to indicate that this type is compiled
   * with runtime assertion check code. */
  public static final boolean rac$RAC_COMPILED = true;

  /** Generated by JML to indicate if the class has completed
     * its initialization. */
  private static transient boolean rac$ClassInitialized = true;

  /** Generated by JML to indicate if an instance has completed
    * its initialization. */
  private transient boolean rac$initialzed = true;

  /** Generated by JML to check the establishment of static
     * invariants. */
  static {
    // cache this class for dynamic calls.
    org.jmlspecs.jmlrac.runtime.JMLChecker.classes.put("jgam.util.JMLTest", jgam.util.JMLTest.class);
    // check static invariant.
    checkInv$static("<clinit>");
  }

}
